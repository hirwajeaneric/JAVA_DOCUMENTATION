/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package midsem;

import connection.Controller;
import java.awt.event.KeyEvent;
import java.util.List;
import java.sql.*;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Session;
import pojos.Employee;
import pojos.Location;
//import net.proteanit.sql.DbUtils;

/**
 *
 * @author AAAA
 */
public class employee extends javax.swing.JFrame {

    /**
     * Creates new form employee
     */
    private Connection con;
    public employee() {
        initComponents();
        DBC dbc = DBC.getDBC();
        con = dbc.getConnection();
         populateTable();
       //  populateProvince();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        SAVE = new javax.swing.JButton();
        ID = new javax.swing.JTextField();
        NAME = new javax.swing.JTextField();
        PROVINCE = new javax.swing.JComboBox<>();
        DISTRICT = new javax.swing.JComboBox<>();
        SECTOR = new javax.swing.JComboBox<>();
        DATE = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Employee Id", "Employee Names", "Date of Birth", "Residence Sector"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Employee ID:");

        jLabel2.setText("Employee Name:");

        jLabel3.setText("Date of Birth:");

        jLabel4.setText("Residence Province:");

        jLabel5.setText("Residence District:");

        jLabel6.setText("Residence Sector:");

        SAVE.setText("SAVE");
        SAVE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SAVEActionPerformed(evt);
            }
        });

        ID.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        ID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDActionPerformed(evt);
            }
        });
        ID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                IDKeyPressed(evt);
            }
        });

        NAME.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NAMEMouseClicked(evt);
            }
        });

        PROVINCE.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                PROVINCEItemStateChanged(evt);
            }
        });

        DISTRICT.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                DISTRICTItemStateChanged(evt);
            }
        });
        DISTRICT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DISTRICTMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                DISTRICTMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(48, 48, 48)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(NAME, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                                    .addComponent(DATE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(64, 64, 64)
                                .addComponent(ID, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(111, 111, 111)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(SECTOR, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                                        .addComponent(DISTRICT, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4)
                                .addGap(41, 41, 41)
                                .addComponent(PROVINCE, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(61, 61, 61))))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(SAVE, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4)
                            .addComponent(ID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PROVINCE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5)
                            .addComponent(NAME, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DISTRICT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6)
                            .addComponent(SECTOR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(DATE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                .addComponent(SAVE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SAVEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SAVEActionPerformed
 try{
     Session ss = Controller.getSessionFactory().openSession();
     ss.beginTransaction();
     pojos.Employee e = new pojos.Employee();
        e.setEmployeeid(Integer.parseInt(ID.getText()));
        e.setEmployeenames(NAME.getText());
        e.setDateofbirth(DATE.getDate());
        e.setResidence(SECTOR.getSelectedItem().toString());
    ss.save(e);
    ss.getTransaction().commit();
    ss.close();
    JOptionPane.showMessageDialog(rootPane,"Successfull", "Successfull",1);
    populateTable();
 }catch(Exception ex){
     System.out.println(" "+ex);
     JOptionPane.showMessageDialog(rootPane,""+ex, "Error Occured",1);
 }

    }//GEN-LAST:event_SAVEActionPerformed

    private void IDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IDActionPerformed

    private void DISTRICTMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DISTRICTMousePressed

        // TODO add your handling code here:
    }//GEN-LAST:event_DISTRICTMousePressed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated

        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowActivated

    private void DISTRICTItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_DISTRICTItemStateChanged


     getSectorByParent(DISTRICT.getSelectedItem().toString());
// TODO add your handling code here:
    }//GEN-LAST:event_DISTRICTItemStateChanged

    private void PROVINCEItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_PROVINCEItemStateChanged
        String Province = PROVINCE.getSelectedItem().toString();
        getDistrictByParent(PROVINCE.getSelectedItem().toString());
 //       System.out.println("the selsected province"+Province);

    }//GEN-LAST:event_PROVINCEItemStateChanged

    private void DISTRICTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DISTRICTMouseClicked


// TODO add your handling code here:
    }//GEN-LAST:event_DISTRICTMouseClicked

    private void IDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IDKeyPressed
        String id = ID.getText();
        int length = id.length();
        char c = evt.getKeyChar();

        if(evt.getKeyChar()>='0' && evt.getKeyChar()<='9'){
            if(length<5){
                ID.setEditable(true);
            }else{
                ID.setEditable(false);
            }
        }else{
            if(evt.getExtendedKeyCode()==KeyEvent.VK_BACK_SPACE || evt.getExtendedKeyCode()==KeyEvent.VK_DELETE ){
                ID.setEditable(true);
            }else{
                ID.setEditable(false);
            }
        }
    }//GEN-LAST:event_IDKeyPressed

    private void NAMEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NAMEMouseClicked
        populateProvince();
    }//GEN-LAST:event_NAMEMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(employee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new employee().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser DATE;
    private javax.swing.JComboBox<String> DISTRICT;
    private javax.swing.JTextField ID;
    private javax.swing.JTextField NAME;
    private javax.swing.JComboBox<String> PROVINCE;
    private javax.swing.JButton SAVE;
    private javax.swing.JComboBox<String> SECTOR;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

public void populateTable(){
    DefaultTableModel tblModel = (DefaultTableModel)jTable1.getModel();
    tblModel.setNumRows(0);
        try {
            Session ss = Controller.getSessionFactory().openSession();
            ss.beginTransaction().commit();
            List<Employee> employee = (List<Employee>)ss.createQuery("from employee").list();
//            DefaultTableModel tblModel = (DefaultTableModel)jTable1.getModel();
        for(Employee e:employee){
            String id = ""+e.getEmployeeid();
            String date = ""+e.getDateofbirth();
            String names = ""+e.getEmployeenames();
            String residence = ""+e.getResidence();
            String[] row = {id, date, names, residence};
            tblModel.addRow(row);
        }
        } catch (Exception ex) {
            System.out.println("populateTable "+ex);
        }


}
private void clearAll(){

 ID.setText("");
      NAME.setText("");
      DATE.setDate(null);
      PROVINCE.setSelectedItem(false);
      DISTRICT.setSelectedItem(false);
      SECTOR.setSelectedItem(false);

}
private void populateProvince(){
       try{
           PROVINCE.removeAllItems();
           Session ss = Controller.getSessionFactory().openSession();
           ss.beginTransaction().commit();
           List<Location> location = (List<Location>)ss.createQuery("from location where parent = 0").list();
           for(Location l:location){
               PROVINCE.addItem(l.getName());
            }
           }

       //}
       catch(Exception ex){
           System.out.println("populateProvince "+ex);
       }

    }
private void getDistrictByParent(String Province){
    int id = 0;
    try{
       Session ss = Controller.getSessionFactory().openSession();
       ss.beginTransaction().commit();
       List<Location> location = (List<Location>)ss.createQuery("from location where name = '"+Province+"' ").list();
       for(Location l:location){
           id = l.getId();
       }
    }catch(Exception ex){
        System.out.println("getDistrictByParent "+ex);
    }
    populateDistrict(id);
}
private void populateDistrict(int Parentid){
    try{
          DISTRICT.removeAllItems();
    Session ss = Controller.getSessionFactory().openSession();
    ss.beginTransaction().commit();
    List<Location> location = (List<Location>)ss.createQuery("from location where parent ='"+Parentid+"' ").list();
    for(Location l:location){
        DISTRICT.addItem(l.getName());
    }
    }catch (Exception ex){
        System.out.println("populateDistrict "+ex);
    }
}

private void getSectorByParent(String District){
    int id = 0;
    try{
       Session ss = Controller.getSessionFactory().openSession();
       ss.beginTransaction().commit();
       List<Location> location = (List<Location>)ss.createQuery("from location where name = '"+District+"' ").list();
       for(Location l:location){
           id = l.getId();
       };
    }catch(Exception ex){
        System.out.println("getSectorByParent "+ex);
    }
    populateSector(id);
}
private void populateSector(int id){
        try{
          SECTOR.removeAllItems();
    Session ss = Controller.getSessionFactory().openSession();
    ss.beginTransaction().commit();
    List<Location> location = (List<Location>)ss.createQuery("from location where parent ='"+id+"' ").list();
    SECTOR.addItem(l.getName());
    for(Location l:location){
//        System.out.println("parent "+Parentid);
//        System.out.println("district "+l.getName());
    }
    }catch (Exception ex){
        System.out.println("populateSector "+ex);
    }
//        SECTOR.removeAllItems();
//       String prov = PROVINCE.getSelectedItem().toString();
//      String dis= DISTRICT.getSelectedItem().toString();
//           if(dis.equals("Gasabo")){
//
//                try{
//                    String query="select* from location where parent='3'";
//           PreparedStatement st = con.prepareStatement(query);
//           ResultSet rs=st.executeQuery();
//                    while(rs.next()){
//
//            String sector= rs.getString(2);
//            SECTOR.addItem(sector);
//               }
//                }
//                catch(Exception ex){
//           JOptionPane.showMessageDialog(this, "error from populate sector   "+ex);
//       }
//           }
//               else if(dis.equals("Kicukiro")){
//               try{
//                    String query="select* from location where parent='4'";
//           PreparedStatement st = con.prepareStatement(query);
//           ResultSet rs=st.executeQuery();
//                    while(rs.next()){
//
//            String sector= rs.getString(2);
//            SECTOR.addItem(sector);
//               }
//                }
//                catch(Exception ex){
//           JOptionPane.showMessageDialog(this, "error from populate sector   "+ex);
//       }
//
//               }
//
//           else if(dis.equals("Nyarugenge")){
//               try{
//                    String query="select* from location where parent='5'";
//           PreparedStatement st = con.prepareStatement(query);
//           ResultSet rs=st.executeQuery();
//                    while(rs.next()){
//
//            String sector= rs.getString(2);
//            SECTOR.addItem(sector);
//               }
//                }
//                catch(Exception ex){
//           JOptionPane.showMessageDialog(this, "error from populate sector   "+ex);
//       }
//
//               }
//           else if(dis.equals("Gatsibo")){
//               try{
//                    String query="select* from location where parent='6'";
//           PreparedStatement st = con.prepareStatement(query);
//           ResultSet rs=st.executeQuery();
//                    while(rs.next()){
//
//            String sector= rs.getString(2);
//            SECTOR.addItem(sector);
//               }
//                }
//                catch(Exception ex){
//           JOptionPane.showMessageDialog(this, "error from populate sector   "+ex);
//       }
//
//               }
//
//           else if(dis.equals("Kayonza")){
//               try{
//                    String query="select* from location where parent='7'";
//           PreparedStatement st = con.prepareStatement(query);
//           ResultSet rs=st.executeQuery();
//                    while(rs.next()){
//
//            String sector= rs.getString(2);
//            SECTOR.addItem(sector);
//               }
//                }
//                catch(Exception ex){
//           JOptionPane.showMessageDialog(this, "error from populate sector   "+ex);
//       }
//
//               }
//           else if(dis.equals("Rwamagana")){
//               try{
//                    String query="select* from location where parent='8'";
//           PreparedStatement st = con.prepareStatement(query);
//           ResultSet rs=st.executeQuery();
//                    while(rs.next()){
//
//            String sector= rs.getString(2);
//            SECTOR.addItem(sector);
//               }
//                }
//                catch(Exception ex){
//           JOptionPane.showMessageDialog(this, "error from populate sector   "+ex);
//       }
//
//               }
           }


















}
